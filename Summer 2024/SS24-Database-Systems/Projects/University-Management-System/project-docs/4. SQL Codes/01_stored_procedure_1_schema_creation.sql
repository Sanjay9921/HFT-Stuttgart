/* 1. STORED PROCEDURE */

/* DDL STATEMENTS */

DROP PROCEDURE IF EXISTS UMS_Schema_Creation;

DELIMITER $$

CREATE PROCEDURE UMS_Schema_Creation()
BEGIN

/* DDL STATEMENTS */

/* 1. DROP TABLES */

/*1.1*/
DROP TABLE IF EXISTS GRADES;
DROP TABLE IF EXISTS SUBJECT;

/*1.2*/
DROP TABLE IF EXISTS FEES;
DROP TABLE IF EXISTS ENROLLMENT;

/*1.3*/
DROP TABLE IF EXISTS COURSE;
DROP table IF EXISTS DEPARTMENT;

/*1.4*/
DROP TABLE IF EXISTS INSTRUCTOR;
DROP TABLE IF EXISTS STUDENT;

/*1.5*/
DROP TABLE IF EXISTS ADMINISTRATOR;

/* 2. SCHEMA CREATION */

/*2.1 ADMINISTRATOR TABLE */
CREATE TABLE ADMINISTRATOR(
	USER_ID VARCHAR(16) PRIMARY KEY,
	PSWD VARCHAR(16),
	FIRST_NAME VARCHAR(255),
	LAST_NAME VARCHAR(255),
	CONTACT VARCHAR(17),
	EMAIL VARCHAR(255) /* Trigger to generate regex email -> firstname.lastname@hft-europa.com*/
);

/*2.2 INSTRUCTOR TABLE */
CREATE TABLE INSTRUCTOR(
	USER_ID VARCHAR(16),
	PSWD VARCHAR(16),
	FIRST_NAME VARCHAR(255),
	LAST_NAME VARCHAR(255),
	CONTACT VARCHAR(15),
	EMAIL VARCHAR(50), /* Trigger to generate regex email -> firstname.lastname@hft-europa.com*/
	DOB VARCHAR(255),
	HOME_ADDRESS VARCHAR(255),
	HFT_CABIN VARCHAR(255),
	EMP_ID VARCHAR(16) PRIMARY KEY
);

/*2.3 STUDENT TABLE */
CREATE TABLE STUDENT(
	USER_ID VARCHAR(16),
	PSWD VARCHAR(16),
	FIRST_NAME VARCHAR(255),
	LAST_NAME VARCHAR(255),
	CONTACT VARCHAR(15),
	EMAIL VARCHAR(50),
	DOB VARCHAR(255),
    HOME_ADDRESS VARCHAR(255),
	GRADE_XII VARCHAR(16),
	INTERNATIONAL_STUDENT VARCHAR(16),
	IMMA_ID VARCHAR(16) PRIMARY KEY
);

/*2.4 DEPARTMENT TABLE */
CREATE TABLE DEPARTMENT(
	DEPT_ID INT PRIMARY KEY,
	DEAN_ID VARCHAR(16),
	DEPT_NAME VARCHAR(255),
	FOREIGN KEY (DEAN_ID) REFERENCES INSTRUCTOR(EMP_ID)
		ON DELETE SET NULL ON UPDATE CASCADE
);

/*2.5 COURSE TABLE */
CREATE TABLE COURSE(
	COURSE_ID INT PRIMARY KEY,
	DEPT_ID INT,
	INSTRUCTOR_ID VARCHAR(16),
	COURSE_NAME VARCHAR(255),
	COURSE_CODE VARCHAR(10), /* Master Software Technology -> mst */
	CREDITS INT,
	BUILDING_NO INT,
	ROOM_NO INT,
	FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID)
	ON DELETE SET NULL ON UPDATE CASCADE,
	FOREIGN KEY (INSTRUCTOR_ID) REFERENCES INSTRUCTOR(EMP_ID)
	ON DELETE SET NULL ON UPDATE CASCADE 
);

/*2.6 FEES */
CREATE TABLE FEES(
	STUDENT_ID VARCHAR(16),
	TUITION_FEES VARCHAR(16), /* 1500 Euros for International Students */
	SEMESTER_FEES VARCHAR(16), /* 200 Euros for all */
	D_TICKET VARCHAR(16), /* Optional: 360 Euros for all */
	RESEARCH_VARIABLE VARCHAR(16), /* Optional: Variable */
	FEES_PAID VARCHAR(3),
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(IMMA_ID)
	ON DELETE SET NULL ON UPDATE CASCADE 
);

/*2.7 ENROLLMENT */
CREATE TABLE ENROLLMENT(
	IMMA_ID VARCHAR(16),
	DEPT_ID INT,
	COURSE_ID INT,
	IMMA_DATE VARCHAR(255),
	IMMA_STATUS VARCHAR(100),
	FOREIGN KEY (IMMA_ID) REFERENCES STUDENT(IMMA_ID)
	ON DELETE SET NULL ON UPDATE CASCADE,
	FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID)
	ON DELETE SET NULL ON UPDATE CASCADE,
	FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
	ON DELETE SET NULL ON UPDATE CASCADE
);

/*2.8 SUBJECT TABLE */
CREATE TABLE SUBJECT(
	STUDENT_ID VARCHAR(16),
	COURSE_ID INT,
	SEMESTER INT,
	SUBJECT1 VARCHAR(255),
	SUBJECT2 VARCHAR(255),
	SUBJECT3 VARCHAR(255),
	SUBJECT4 VARCHAR(255),
	SUBJECT5 VARCHAR(255),
	ELECTIVE1 VARCHAR(255),
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(IMMA_ID)
	ON DELETE SET NULL ON UPDATE CASCADE,
	FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
	ON DELETE SET NULL ON UPDATE CASCADE
);

/*2.9 GRADES TABLE */
CREATE TABLE GRADES(
	STUDENT_ID VARCHAR(16),
	COURSE_ID INT,
	SEMESTER INT,
	GRADE1 VARCHAR(8),
	GRADE2 VARCHAR(8),
	GRADE3 VARCHAR(8),
	GRADE4 VARCHAR(8),
	GRADE5 VARCHAR(8),
	GRADE6 VARCHAR(8),
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(IMMA_ID)
	ON DELETE SET NULL ON UPDATE CASCADE,
	FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
	ON DELETE SET NULL ON UPDATE CASCADE
);

END;

$$

DELIMITER ;